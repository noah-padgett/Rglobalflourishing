0.1**2
devtools::load_all()
# Specify where you want to output results#
# Can be left blank, and the results will output to the same directory as the data.#
out.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/3-Rglobalflourishing"#
#
# Here is YOUR wave 1 construct variable#
FOCAL_PREDICTOR <- "PHYSICAL_HLTH_Y1"#
FOCAL_PREDICTOR_BETTER_NAME <- "Self-rated physical health"#
FOCAL_PREDICTOR_REFERENCE_VALE <- "estimate within country mean of self rated physical health"#
#
# IF your predictor (focal exposure) is binary/categorical, use the code below to define how you#
#   want it to be categorized. Categorization must result in a binary variable 0/1 for#
#   consistency across studies.#
VALUES_DEFINING_UPPER_CATEGORY <- c(NULL)#
VALUES_DEFINING_LOWER_CATEGORY <- c(NULL)#
# Note 1: if your focal predictor is continuous (all items with 7+ response options), you can force the responses#
# 	to be categorized as 0/1 using the above with the below option changed to TRUE. This can be useful#
# 	when testing the sensitivity of results or for composite outcomes such as anxiety (sum of#
#   feel_anxious and control_worry)  or depression (sum of depressed and interest) that have a#
# 	history of being dichotomized.#
FORCE_BINARY <- FALSE#
# Note 2: if your focal predictor is categorical/binary, you can use the responses as if they were continuous.#
# 	The provided (straightforward-ish) approach implemented is to reverse code all#
#   ordered-categorical variables (reverse code from what is reported in the codebook), and#
#   standardized as if continuous. This approach is not applicable for variables with nominal#
#   response categories such as employment. This is employed using the option below.#
FORCE_CONTINUOUS <- FALSE#
#
# ================================================================================================ ##
# ================================================================================================ ##
# Data Prep#
#
if (is.null(out.dir)) {#
  out.dir <- data.dir#
}#
setwd(out.dir)#
# Note:#
# The following function loads the required packages for the remainder of the script to work.#
load_packages()#
# global options#
options(#
  survey.lonely.psu = "certainty"#
)#
# outcome vectors#
LIST.COMPOSITES <- get_variable_codes('LIST.COMPOSITES')#
RECODE.DEFAULTS <- list(#
  FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
  DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
    get_variable_codes("DEMOGRAPHIC.VARS", appnd="_Y1"),#
    get_variable_codes("RETROSPECTIVE.VARS", appnd="_Y1")#
  ),#
  VARIABLES.VEC = c(get_variable_codes("VARS.Y1"), get_variable_codes("VARS.Y2")),#
  FORCE_BINARY = FORCE_BINARY,#
  FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
  VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
  VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
  USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
)#
#
# get "raw data"#
df.raw <- gfs_get_labelled_raw_data(#
  file = here::here(data.dir, dataset.name),#
  list.composites = LIST.COMPOSITES,#
  .test = FALSE#
)
# Add the directory where the dataset is stored on your computer#
data.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/data/wave2-data"#
#dataset.name <- "gfs_all_countries_wave1.sav"#
dataset.name <- "df_w2_sim_wide.sav"#
#
# Specify where you want to output results#
# Can be left blank, and the results will output to the same directory as the data.#
out.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/3-Rglobalflourishing"#
#
# Here is YOUR wave 1 construct variable#
FOCAL_PREDICTOR <- "PHYSICAL_HLTH_Y1"#
FOCAL_PREDICTOR_BETTER_NAME <- "Self-rated physical health"#
FOCAL_PREDICTOR_REFERENCE_VALE <- "estimate within country mean of self rated physical health"#
#
# IF your predictor (focal exposure) is binary/categorical, use the code below to define how you#
#   want it to be categorized. Categorization must result in a binary variable 0/1 for#
#   consistency across studies.#
VALUES_DEFINING_UPPER_CATEGORY <- c(NULL)#
VALUES_DEFINING_LOWER_CATEGORY <- c(NULL)#
# Note 1: if your focal predictor is continuous (all items with 7+ response options), you can force the responses#
# 	to be categorized as 0/1 using the above with the below option changed to TRUE. This can be useful#
# 	when testing the sensitivity of results or for composite outcomes such as anxiety (sum of#
#   feel_anxious and control_worry)  or depression (sum of depressed and interest) that have a#
# 	history of being dichotomized.#
FORCE_BINARY <- FALSE#
# Note 2: if your focal predictor is categorical/binary, you can use the responses as if they were continuous.#
# 	The provided (straightforward-ish) approach implemented is to reverse code all#
#   ordered-categorical variables (reverse code from what is reported in the codebook), and#
#   standardized as if continuous. This approach is not applicable for variables with nominal#
#   response categories such as employment. This is employed using the option below.#
FORCE_CONTINUOUS <- FALSE#
#
# ================================================================================================ ##
# ================================================================================================ ##
# Data Prep#
#
if (is.null(out.dir)) {#
  out.dir <- data.dir#
}#
setwd(out.dir)#
# Note:#
# The following function loads the required packages for the remainder of the script to work.#
load_packages()#
# global options#
options(#
  survey.lonely.psu = "certainty"#
)#
# outcome vectors#
LIST.COMPOSITES <- get_variable_codes('LIST.COMPOSITES')#
RECODE.DEFAULTS <- list(#
  FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
  DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
    get_variable_codes("DEMOGRAPHIC.VARS", appnd="_Y1"),#
    get_variable_codes("RETROSPECTIVE.VARS", appnd="_Y1")#
  ),#
  VARIABLES.VEC = c(get_variable_codes("VARS.Y1"), get_variable_codes("VARS.Y2")),#
  FORCE_BINARY = FORCE_BINARY,#
  FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
  VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
  VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
  USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
)#
#
# get "raw data"#
df.raw <- gfs_get_labelled_raw_data(#
  file = here::here(data.dir, dataset.name),#
  list.composites = LIST.COMPOSITES,#
  .test = FALSE#
)
file = here::here(data.dir, dataset.name)
list.composites = LIST.COMPOSITES
wgt = "ANNUAL_WEIGHT_R2"
method.income="quintiles"
data.is.wide = FALSE
psu = "PSU"
strata = "STRATA"
data.is.wide = TRUE
df.original <- haven::read_spss(file)#
    df.original <- haven::zap_labels(df.original)
gfs_data_to_wide
data.is.long = FALSE
df.original <- df.original %>%#
      dplyr::mutate(#
        COUNTRY = recode_labels(COUNTRY, "COUNTRY"),#
        COUNTRY = factor(COUNTRY),#
        COUNTRY2 = COUNTRY#
      )
devtools::load_all()
df.raw <- gfs_get_labelled_raw_data(
file = here::here(data.dir, dataset.name),
list.composites = LIST.COMPOSITES
)
table(df.raw$DRINKS)
table(df.raw$DRINKS_Y1)
table(df.raw[,c("DRINKS_Y1","COUNTRY")])
table(df.raw[,c("DRINKS_Y1","COUNTRY")])
