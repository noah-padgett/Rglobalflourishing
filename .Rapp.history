devtools::load_all()
data.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/data/wave2-data"#
dataset.name <- "gfs_all_countries_wave2.sav"#
#
# Specify where you want to output results#
# Can be left blank, and the results will output to the same directory as the data.#
out.dir <- getwd()#
#
# Here is YOUR wave 1 construct variable#
FOCAL_PREDICTOR <- c("PHYSICAL_HLTH_Y1")#
FOCAL_PREDICTOR_BETTER_NAME <- c("Self-Rated Physical Health")#
FOCAL_PREDICTOR_REFERENCE_VALUE <- c("mean rating within country")#
#
# IF your predictor (focal exposure) is binary/categorical, use the code below to define how you#
#   want it to be categorized. Categorization must result in a binary variable 0/1 for#
#   consistency across studies.#
VALUES_DEFINING_UPPER_CATEGORY <- list(NA)#
VALUES_DEFINING_LOWER_CATEGORY <- list(NA)#
# Note 1: if your focal predictor is continuous (all items with 7+ response options), you can force the responses#
# 	to be categorized as 0/1 using the above with the below option changed to TRUE. This can be useful#
# 	when testing the sensitivity of results or for composite outcomes such as anxiety (sum of#
#   feel_anxious and control_worry)  or depression (sum of depressed and interest) that have a#
# 	history of being dichotomized.#
FORCE_BINARY <- c(FALSE)#
# Note 2: if your focal predictor is categorical/binary, you can use the responses as if they were continuous.#
# 	The provided (straightforward-ish) approach implemented is to reverse code all#
#   ordered-categorical variables (reverse code from what is reported in the codebook), and#
#   standardized as if continuous. This approach is not applicable for variables with nominal#
#   response categories such as employment. This is employed using the option below.#
FORCE_CONTINUOUS <- c(FALSE)#
# Note 3: if you need to define a subpopulation for domain analysis. (in-development)#
SUBPOPULATION <- list(NULL)#
#
names(FORCE_CONTINUOUS) <- names(FORCE_BINARY) <- names(VALUES_DEFINING_UPPER_CATEGORY)  <- names(VALUES_DEFINING_LOWER_CATEGORY) <- names(SUBPOPULATION) <- FOCAL_PREDICTOR#
# ================================================================================================ ##
# ================================================================================================ ##
# Data Prep#
#
if (is.null(out.dir)) {#
  out.dir <- data.dir#
}#
setwd(out.dir)#
# Note:#
# The following function loads the required packages for the remainder of the script to work.#
load_packages()#
# global options#
options(#
  survey.lonely.psu = "certainty"#
)#
# outcome vectors#
LIST.COMPOSITES <- get_variable_codes('LIST.COMPOSITES')#
RECODE.DEFAULTS <- list(#
  FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
  DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
    get_variable_codes("GENDER.RACE", appnd=""),#
    get_variable_codes("DEMOGRAPHIC.VARS", appnd="_Y1"),#
    get_variable_codes("RETROSPECTIVE.VARS", appnd="_Y1")#
  ),#
  VARIABLES.VEC = c(get_variable_codes("VARS.Y1"), get_variable_codes("VARS.Y2")),#
  FORCE_BINARY = FORCE_BINARY,#
  FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
  VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
  VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
  USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
)#
#
# get "raw data"#
df.raw <- gfs_get_labelled_raw_data(#
  file = here::here(data.dir, dataset.name),#
  list.composites = LIST.COMPOSITES#
)
pred0 <- c(#
      'ANNUAL_WEIGHT_R2', 'MODE_RECRUIT',#
      'AGE_Y1', 'GENDER_Y1', 'RACE_PLURALITY1', 'MARITAL_STATUS_Y1',#
      'EMPLOYMENT_Y1', 'EDUCATION_3_Y1', 'ATTEND_SVCS_Y1',#
      'URBAN_RURAL_Y1', 'BORN_COUNTRY_Y1', 'REL2_Y1',#
      'ABUSED_Y1', 'OUTSIDER_Y1',#
      'HEALTH_GROWUP_Y1', 'INCOME_12YRS_Y1',#
      'FATHER_RELATN_Y1', 'MOTHER_RELATN_Y1',#
      'PARENTS_12YRS_Y1'#
    )#
    df.imp <- run_impute_data(#
      data =  df.raw,#
      data.dir = data.dir,#
      Nimp = 2,#
      Miter = 1,#
      pred.vars = pred0#
    )
run_impute_data
pred0 <- c(#
      'ANNUAL_WEIGHT_R2', 'MODE_RECRUIT',#
      'AGE_Y1', 'GENDER_Y1', 'RACE_PLURALITY1', 'MARITAL_STATUS_Y1',#
      'EMPLOYMENT_Y1', 'EDUCATION_3_Y1', 'ATTEND_SVCS_Y1',#
      'URBAN_RURAL_Y1', 'BORN_COUNTRY_Y1', 'REL2_Y1',#
      'ABUSED_Y1', 'OUTSIDER_Y1',#
      'HEALTH_GROWUP_Y1', 'INCOME_12YRS_Y1',#
      'FATHER_RELATN_Y1', 'MOTHER_RELATN_Y1',#
      'PARENTS_12YRS_Y1'#
    )
data =  df.raw
Nimp = 2
Miter = 1
pred.vars = pred0
file.name = NULL
use.log.poly = FALSE
data <- data %>%#
    # need to remove all "composite"#
    dplyr::select(!contains("COMPOSITE_")) %>%#
    dplyr::mutate(COUNTRY2 = COUNTRY) %>%#
    dplyr::group_by(COUNTRY) %>%#
    tidyr::nest() %>%#
    dplyr::mutate(#
      data = purrr::map(data, \(tmp.dat) {#
        tmp.dat %>%#
          dplyr::mutate(dplyr::across(#
            !any_of(c(#
              "COUNTRY2",#
              "AGE_GRP",#
              "AGE_GRP_Y1",#
              "RACE",#
              "RACE_PLURALITY",#
              "RACE_PLURALITY_Y1",#
              "CASE_MISSING_Y2"#
            )),#
            \(x) {#
              x <- dplyr::case_when(x %in% get_missing_codes(dplyr::cur_column()) ~ NA,#
                                    .default = x)#
              x <- dplyr::case_when(x %in% "(Missing)" ~ NA, .default = x)#
              x <- recode_to_type(x, dplyr::cur_column())#
              x#
            },#
            .names = "{.col}"#
          ),#
          dplyr::across(where(is.factor), droplevels))#
      })#
    )
run_imputation <- function(country, df.tmp){#
    # filter, unnest and extract data#
    df.tmp <- df.tmp %>%#
      filter(COUNTRY == country)#
    df.tmp <- df.tmp$data[[1]]#
#
    cur.country <- as.character(df.tmp$COUNTRY2[1])#
    print(paste0("Country: ", cur.country ))#
    # check for variables will 100% missing#
    comp.miss <- df.tmp %>%#
      dplyr::summarise(N_total = n(), dplyr::across(dplyr::everything(), \(x) {#
        sum(is.na(x)) / N_total#
      }))#
    comp.miss <- colnames(comp.miss)[comp.miss == 1.00]#
    ## =================================================================== ###
    ## =================================================================== ###
    # passive imputation to get method vector#
    pass.imp <- mice::mice(df.tmp, maxit = 0)#
    tmp.dat <- pass.imp$data#
    tmp.pred <- pass.imp$predictorMatrix#
    tmp.meth <- pass.imp$method#
    ## =================================================================== ###
    ## =================================================================== ###
    var.ignore0 <- c(#
      "COUNTRY",#
      "WAVE",#
      "MODE_RECRUIT",#
      "MODE_ANNUAL",#
      "RECRUIT_TYPE",#
      "DOI_RECRUIT",#
      "DOI_ANNUAL",#
      "STRATA",#
      "PSU",#
      "FULL_PARTIAL",#
      #"ANNUAL_WEIGHT1",#
      #"ANNUAL_WEIGHT_C2",#
      #"ANNUAL_WEIGHT_L2",#
      #"ANNUAL_WEIGHT_R2",#
      #"RETENTION_WEIGHT_C",#
      #"RETENTION_WEIGHT_L",#
#
      "AGE_GRP",#
      "CNTRY_REL_BUD",#
      "CNTRY_REL_CHI",#
      "CNTRY_REL_CHR",#
      "CNTRY_REL_HIN",#
      "CNTRY_REL_ISL",#
      "CNTRY_REL_JUD",#
      "CNTRY_REL_SHI",#
      paste0("TEACHINGS_", 1:15),#
      paste0("REL", 3:9),#
      paste0("REGION", 2:3)#
    )#
    var.ignore <- c(#
      "ID",#
      "COUNTRY2",#
      "CASE_OBSERVED_Y2",#
      "RACE",#
      var.ignore0,#
      paste0(var.ignore0, "_Y1"),#
      paste0(var.ignore0, "_Y2")#
    )#
    ## =================================================================== ###
    var.class <- df.tmp %>%#
      summarise(across(everything(), \(x) class(x)))#
    var.n.unique <- df.tmp %>%#
      summarise(across(everything(), \(x) length(na.omit(unique( x )))))#
    tmp.meth[!(names(tmp.meth) %in% var.ignore)] <- "pmm"#
    ## If you want to change to usine logreg/polyreg (much slower) change use.log.poly = TRUE#
    if(use.log.poly){#
      tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
                 (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique == 2]) &#
                 (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "logreg"#
      tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
                 (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique > 2]) &#
                 (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "polyreg"#
    }#
    # cart seems to never fail to throw errors --  use as default for may categoried factors#
    tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
               (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique > 7]) &#
               (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "cart"#
    tmp.meth[names(tmp.meth) %in%#
               c("NUM_CHILDREN", "NUM_CHILDREN_Y1", "NUM_CHILDREN_Y2", paste0("INCOME",c("","_Y1","_Y2")))#
    ] <- "cart"#
    tmp.meth[(names(tmp.meth) %in% var.ignore | names(tmp.meth) %in% comp.miss)] <- ""#
    ## =================================================================== ###
    # Set up base predictor matrix#
    # Minimal set of missingness predictors (**TO-DO**)#
    if(is.null(pred.vars)){#
      vars0 <- c(#
        "ANNUAL_WEIGHT1",#
        "MODE_RECRUIT",#
        "MODE_ANNUAL",#
        "STRATA",#
        get_variable_codes("DEMOGRAPHIC.VARS"),#
        get_variable_codes("RETROSPECTIVE.VARS"),#
        "URBAN_RURAL"#
      )#
      pred.vars <- c(#
        vars0,#
        paste0(vars0,"_Y1")#
      )#
    }#
    keep.var <- keep_variable(pred.vars, tmp.dat)#
    exclude.var <- c(#
      var.ignore[var.ignore %in% colnames(tmp.dat)],#
      colnames(tmp.dat)[!(colnames(tmp.dat) %in% pred.vars[keep.var])]#
    ) |> unique()#
    tmp.pred <- quickpred2(#
      tmp.dat,#
      include = pred.vars[keep.var],#
      exclude = exclude.var#
    )#
    # predictor matrix:#
    # rows: designate variable being imputed#
    # cols: designate what variable(s) are used to predict row#
    ## =================================================================== ###
    # NEXT, set up lag predictors#
    tmp.vec <- get_variable_codes("OUTCOME.VEC")#
    tmp.vec <- tmp.vec[str_detect(tmp.vec, "COMPOSITE_", negate=TRUE)]#
    for(i in 1:length(tmp.vec)){#
      t1 <- paste0(tmp.vec[1], "_Y1")#
      t2 <- paste0(tmp.vec[1], "_Y2")#
      tmp.pred[t2,t1] <- 1#
      #tmp.pred[t1,][tmp.pred[t1,] == 1]#
      #tmp.pred[t2,][tmp.pred[t2,] == 1]#
    }#
    ## =================================================================== ###
    fit.imp <- NULL#
    try({#
      # use futuremice if number of imputation is greater than 5 (should give a speed boost)#
      if(Nimp > 5){#
        fit.imp <- mice::futuremice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = tmp.meth,#
          predictorMatrix = tmp.pred,#
          donors = 10,#
          threshold = 2.0, # see https://github.com/amices/mice/issues/314 for threshold information#
          n.core = round(future::availableCores()/2,0), # use half of available cores#
          parallelseed = 31415#
        )#
      } else {#
        fit.imp <- mice::mice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = tmp.meth,#
          predictorMatrix = tmp.pred,#
          donors = 10,#
          threshold = 2.0,#
          seed = 31415#
        )#
      }#
    })#
    # the following is used just in case the above fails#
    if (is.null(fit.imp)) {#
      try({#
        fit.imp <- mice::mice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = "cart",#
          predictorMatrix = tmp.pred,#
          seed = 31415#
        )#
      })#
    }#
    ## save country-specific imputation result#
    c.file.name <- paste0("imputed_data_obj_",cur.country,"_nimp_",Nimp,".RData")#
    save(df.imp, file = here::here(data.dir, c.file.name))#
  }
country_vec <- sort(as.character(unique(data$COUNTRY2)))
country_vec <- sort(as.character(unique(data$COUNTRY)))
country_vec
map(.x = country_vec,#
      .f = ~run_imputation(country_name = .x, df.tmp = data))
map(.x = country_vec,#
      .f = ~run_imputation(country = .x, df.tmp = data))
# country, character string#
  # x, df (from above) to be filtered based on country#
  run_imputation <- function(country, df.tmp){#
    # filter, unnest and extract data#
    df.tmp <- df.tmp %>%#
      filter(COUNTRY == country) %>%#
      ungroup() %>%#
      unnest(c(data))#
#
    cur.country <- as.character(df.tmp$COUNTRY2[1])#
    print(paste0("Country: ", cur.country ))#
    # check for variables will 100% missing#
    comp.miss <- df.tmp %>%#
      dplyr::summarise(N_total = n(), dplyr::across(dplyr::everything(), \(x) {#
        sum(is.na(x)) / N_total#
      }))#
    comp.miss <- colnames(comp.miss)[comp.miss == 1.00]#
    ## =================================================================== ###
    ## =================================================================== ###
    # passive imputation to get method vector#
    pass.imp <- mice::mice(df.tmp, maxit = 0)#
    tmp.dat <- pass.imp$data#
    tmp.pred <- pass.imp$predictorMatrix#
    tmp.meth <- pass.imp$method#
    ## =================================================================== ###
    ## =================================================================== ###
    var.ignore0 <- c(#
      "COUNTRY",#
      "WAVE",#
      "MODE_RECRUIT",#
      "MODE_ANNUAL",#
      "RECRUIT_TYPE",#
      "DOI_RECRUIT",#
      "DOI_ANNUAL",#
      "STRATA",#
      "PSU",#
      "FULL_PARTIAL",#
      #"ANNUAL_WEIGHT1",#
      #"ANNUAL_WEIGHT_C2",#
      #"ANNUAL_WEIGHT_L2",#
      #"ANNUAL_WEIGHT_R2",#
      #"RETENTION_WEIGHT_C",#
      #"RETENTION_WEIGHT_L",#
#
      "AGE_GRP",#
      "CNTRY_REL_BUD",#
      "CNTRY_REL_CHI",#
      "CNTRY_REL_CHR",#
      "CNTRY_REL_HIN",#
      "CNTRY_REL_ISL",#
      "CNTRY_REL_JUD",#
      "CNTRY_REL_SHI",#
      paste0("TEACHINGS_", 1:15),#
      paste0("REL", 3:9),#
      paste0("REGION", 2:3)#
    )#
    var.ignore <- c(#
      "ID",#
      "COUNTRY2",#
      "CASE_OBSERVED_Y2",#
      "RACE",#
      var.ignore0,#
      paste0(var.ignore0, "_Y1"),#
      paste0(var.ignore0, "_Y2")#
    )#
    ## =================================================================== ###
    var.class <- df.tmp %>%#
      summarise(across(everything(), \(x) class(x)))#
    var.n.unique <- df.tmp %>%#
      summarise(across(everything(), \(x) length(na.omit(unique( x )))))#
    tmp.meth[!(names(tmp.meth) %in% var.ignore)] <- "pmm"#
    ## If you want to change to usine logreg/polyreg (much slower) change use.log.poly = TRUE#
    if(use.log.poly){#
      tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
                 (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique == 2]) &#
                 (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "logreg"#
      tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
                 (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique > 2]) &#
                 (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "polyreg"#
    }#
    # cart seems to never fail to throw errors --  use as default for may categoried factors#
    tmp.meth[!(names(tmp.meth) %in% var.ignore) &#
               (names(tmp.meth) %in% colnames(var.n.unique)[var.n.unique > 7]) &#
               (names(tmp.meth) %in% colnames(var.class)[var.class == "factor"])] <- "cart"#
    tmp.meth[names(tmp.meth) %in%#
               c("NUM_CHILDREN", "NUM_CHILDREN_Y1", "NUM_CHILDREN_Y2", paste0("INCOME",c("","_Y1","_Y2")))#
    ] <- "cart"#
    tmp.meth[(names(tmp.meth) %in% var.ignore | names(tmp.meth) %in% comp.miss)] <- ""#
    ## =================================================================== ###
    # Set up base predictor matrix#
    # Minimal set of missingness predictors (**TO-DO**)#
    if(is.null(pred.vars)){#
      vars0 <- c(#
        "ANNUAL_WEIGHT1",#
        "MODE_RECRUIT",#
        "MODE_ANNUAL",#
        "STRATA",#
        get_variable_codes("DEMOGRAPHIC.VARS"),#
        get_variable_codes("RETROSPECTIVE.VARS"),#
        "URBAN_RURAL"#
      )#
      pred.vars <- c(#
        vars0,#
        paste0(vars0,"_Y1")#
      )#
    }#
    keep.var <- keep_variable(pred.vars, tmp.dat)#
    exclude.var <- c(#
      var.ignore[var.ignore %in% colnames(tmp.dat)],#
      colnames(tmp.dat)[!(colnames(tmp.dat) %in% pred.vars[keep.var])]#
    ) |> unique()#
    tmp.pred <- quickpred2(#
      tmp.dat,#
      include = pred.vars[keep.var],#
      exclude = exclude.var#
    )#
    # predictor matrix:#
    # rows: designate variable being imputed#
    # cols: designate what variable(s) are used to predict row#
    ## =================================================================== ###
    # NEXT, set up lag predictors#
    tmp.vec <- get_variable_codes("OUTCOME.VEC")#
    tmp.vec <- tmp.vec[str_detect(tmp.vec, "COMPOSITE_", negate=TRUE)]#
    for(i in 1:length(tmp.vec)){#
      t1 <- paste0(tmp.vec[1], "_Y1")#
      t2 <- paste0(tmp.vec[1], "_Y2")#
      tmp.pred[t2,t1] <- 1#
      #tmp.pred[t1,][tmp.pred[t1,] == 1]#
      #tmp.pred[t2,][tmp.pred[t2,] == 1]#
    }#
    ## =================================================================== ###
    fit.imp <- NULL#
    try({#
      # use futuremice if number of imputation is greater than 5 (should give a speed boost)#
      if(Nimp > 5){#
        fit.imp <- mice::futuremice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = tmp.meth,#
          predictorMatrix = tmp.pred,#
          donors = 10,#
          threshold = 2.0, # see https://github.com/amices/mice/issues/314 for threshold information#
          n.core = round(future::availableCores()/2,0), # use half of available cores#
          parallelseed = 31415#
        )#
      } else {#
        fit.imp <- mice::mice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = tmp.meth,#
          predictorMatrix = tmp.pred,#
          donors = 10,#
          threshold = 2.0,#
          seed = 31415#
        )#
      }#
    })#
    # the following is used just in case the above fails#
    if (is.null(fit.imp)) {#
      try({#
        fit.imp <- mice::mice(#
          tmp.dat,#
          m = Nimp,#
          maxit = Miter,#
          method = "cart",#
          predictorMatrix = tmp.pred,#
          seed = 31415#
        )#
      })#
    }#
    ## save country-specific imputation result#
    c.file.name <- paste0("imputed_data_obj_",cur.country,"_nimp_",Nimp,".RData")#
    save(fit.imp, file = here::here(data.dir, c.file.name))#
  }#
#
  # data, a flat data.frame with no nesting#
  # Save:#
  # 1. separate files by country#
  country_vec <- sort(as.character(unique(data$COUNTRY)))
country_vec
map(.x = country_vec,#
      .f = ~run_imputation(country = .x, df.tmp = data))
warnings()
devtools::load_all()
RECODE.DEFAULTS
LIST.COMPOSITES
recode_imp_by_country(#
    data.dir,#
    list.default = RECODE.DEFAULTS,#
    list.composites = LIST.COMPOSITES,#
    wgt = "ANNUAL_WEIGHT_R2",#
    .nimp = 2#
  )
devtools::load_all()
recode_imp_by_country(#
    data.dir,#
    list.default = RECODE.DEFAULTS,#
    list.composites = LIST.COMPOSITES,#
    wgt = "ANNUAL_WEIGHT_R2",#
    .nimp = 2#
  )
head(df.raw)
tmp.dat1 <- df.raw %>%#
  filter(COUNTRY == "United States") %>%#
  arrange(ID)#
tmp.dat2 <- readr::read_rds(here::here(data.dir, "recoded_imputed_data_obj_United States.rds")) %>%#
  filter(.imp == 1) %>%#
  arrange(ID)
dnn0 <- c("Raw Data", "Recoded Imputed Data (.imp==1)")
for(i in 1:length(FOCAL_PREDICTOR)){#
  print(FOCAL_PREDICTOR[i])#
  print(table(tmp.dat1[[FOCAL_PREDICTOR[i]]], tmp.dat2[[FOCAL_PREDICTOR[i]]], dnn = dnn0, useNA = "ifany"))#
}
devtools::load_all()
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data = df.imp.long,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
dplyr::last_dplyr_warnings()
dplyr::last_dplyr_warnings()
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
data.dir
# get list of files in data.dir#
  df.files <- list.files(data.dir)#
  df.files <- df.files[str_detect(df.files, "recoded_imputed_data_obj")]
getwd()
dir.exists("results-attr")
df.files
x<-df.files[1]
cur.country <- str_remove(x, "recoded_imputed_data_obj_")
cur.country <- str_remove(cur.country, ".rds")
cur.country
df.tmp <- readr::read_rds(here::here(data.dir, x))
head(df.tmp)
run_attrition_model
data<-df.tmp
fit_attrition_model
colnames(df.tmp)
devtools::load_all()
data
pooled.wgt = as.name("AVG.SAMP.ATTR.WGT")
composite.wgt.name = as.name("SAMP.ATTR.WGT")
df.attr <- data %>%#
    dplyr::group_by(COUNTRY, .imp) %>%#
    tidyr::nest() %>%#
    dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#,...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup()
rlang::last_trace()
colnames(data)
attr.pred <- c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'COMPOSITE_DEPRESSION_Y1', 'COMPOSITE_ANXIETY_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
    )
attr.pred %in% colnames(data)
devtools::load_all()
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup()
df.attr <- df.tmp %>%
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup()
colnames( df.tmp)
attr.pred <- c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'COMPOSITE_DEPRESSION_Y1', 'COMPOSITE_ANXIETY_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
    )
attr.pred
attr.pred[attr.pred %in% colnames(df.tmp)]
attr.pred[!(attr.pred %in% colnames(df.tmp))]
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }))
devtools::load_all()
devtools::load_all()
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x, ...)#
      })#
    )
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup()
devtools::load_all()
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup()
df.attr
colnames(df.attr)
devtools::load_all()
devtools::load_all()
df.imp.long <- run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
df.files <- list.files(data.dir)#
  df.files <- df.files[str_detect(df.files, "recoded_imputed_data_obj")]#
#
  if (!dir.exists("results-attr")) dir.create(here::here(getwd(), "results-attr"))
x
cur.country <- str_remove(x, "recoded_imputed_data_obj_")#
    cur.country <- str_remove(cur.country, ".rds")#
    df.tmp <- readr::read_rds(here::here(data.dir, x))
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data))
head(df.attr)
colnames(df.attr)
summary(df.attr$SAMP.ATTR.WGT)
anyNA(df.attr$SAMP.ATTR.WGT)
composite.wgt.name = "SAMP.ATTR.WGT"
pooled.wgt = "AVG.SAMP.ATTR.WGT"
out.capture <- map(df.files, \(x){#
    cur.country <- str_remove(x, "recoded_imputed_data_obj_")#
    cur.country <- str_remove(cur.country, ".rds")#
    df.tmp <- readr::read_rds(here::here(data.dir, x))#
#
    df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    )
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    )
composite.wgt.name = as.name("SAMP.ATTR.WGT")
pooled.wgt = as.name("AVG.SAMP.ATTR.WGT")
as.name("ATTR.WGT")
attr.wgt.name = as.name("ATTR.WGT")
wgt = as.name("ANNUAL_WEIGHT_R2")
df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    )
summary(df.attr$AVG.SAMP.ATTR.WGT)
anyNA(df.attr$AVG.SAMP.ATTR.WGT)
out.capture <- map(df.files, \(x){#
    cur.country <- str_remove(x, "recoded_imputed_data_obj_")#
    cur.country <- str_remove(cur.country, ".rds")#
    df.tmp <- readr::read_rds(here::here(data.dir, x))#
#
    df.attr <- df.tmp %>%#
    		dplyr::group_by(COUNTRY, .imp) %>%#
    	tidyr::nest() %>%#
    	dplyr::mutate(#
      fit.attr = purrr::map(data, \(tmp.dat){#
        fit_attrition_model(tmp.dat)#, ...)#
      }),#
      data = map(fit.attr, \(x){#
        create_attr_wgts(x)#, ...)#
      })#
    ) %>%#
    tidyr::unnest(c(data)) %>%#
    group_by(COUNTRY, ID) %>%#
    mutate(#
      "{{pooled.wgt}}" := mean({{composite.wgt.name}}, na.rm=TRUE)#
    ) %>%#
    ungroup() %>%#
    select(ID, COUNTRY, .imp, PSU, STRATA, contains("WGT"), fit.attr)#
#
    myfile = here::here("results-attr", paste0(cur.country, " fitted attrition model.rds"))#
    readr::write_rds(df.attr, file = myfile, compress = "gz")#
  })
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
remove(x)
x
remove(cur.country)
devtools::load_all()
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
df.files
myfile
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
here::here("results-attr", paste0(cur.country, " fitted attrition model.rds"))
here::here("results-attr", paste0("Argen", " fitted attrition model.rds"))
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
devtools::load_all()
run_attrition_model_by_country(#
  data.dir,#
  obs.id.var = "CASE_OBSERVED_Y2",#
  attr.pred = c(#
    "ANNUAL_WEIGHT_R2", "MODE_RECRUIT",#
    'COMPOSITE_HAPPI_LIFE_SAT_Y1', 'COMPOSITE_HEALTH_Y1', 'COMPOSITE_MEANING_PURPOSE_Y1',#
    'COMPOSITE_CHARACTER_Y1', 'COMPOSITE_SUBJECTIVE_SOC_CONN_Y1', 'COMPOSITE_FINL_MAT_WORRY_Y1',#
    'COMPOSITE_EXTRAVERSION_Y1', 'COMPOSITE_OPENNESS_Y1', 'COMPOSITE_AGREEABLENESS_Y1',#
    'COMPOSITE_CONSCIENTIOUSNESS_Y1', 'COMPOSITE_NEUROTICISM_Y1',#
    'DEPRESSED_Y1', 'LONELY_Y1', 'DAYS_EXERCISE_Y1',#
    'COV_AGE_GRP_Y1', 'COV_GENDER', 'COV_MARITAL_STATUS_Y1', 'COV_EMPLOYMENT_Y1',#
    'COV_ATTEND_SVCS_Y1', 'COV_EDUCATION_3_Y1', 'COV_BORN_COUNTRY_Y1', "COV_RACE_PLURALITY",#
    "COV_URBAN_RURAL_Y1", 'COV_INCOME_Y1'#
  ),#
  wgt = "ANNUAL_WEIGHT_R2", strata = "STRATA", psu = "PSU"#
)
