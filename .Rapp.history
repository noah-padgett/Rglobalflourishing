devtools::load_all()
# Script: main.R#
# Created by: R. Noah Padgett#
# Last edited on: 2024-01-02#
#
# WARNING: The package was set up to be user-friendly for researchers part of the GFS core#
#   team who mainly have experience with other statistical analysis software such as STATA,#
#   SAS, and SPSS. This package and implementation of the analyses for Wave 2 of the Global#
#   Flourishing Study does NOT conform to "tidy" principles in general. While some elements of tidy#
#   evaluation and syntax structure are used throughout, we did not implement everything with#
#   "tidyness" in mind. As such, we make no guarantees that the package will integrate or#
#   "play nice" with other packages.#
#
# install.packages("remotes")#
#remotes::install_github("noah-padgett/Rglobalflourishing")#
#library(Rglobalflourishing)#
#
# Analysis Set-Up#
#
# Add the directory where the dataset is stored on your computer#
data.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/data/wave1-data"#
#dataset.name <- "gfs_all_countries_wave1.sav"#
dataset.name <- "gfs_wave_2_test_long_format.sav"#
#
# Specify where you want to output results#
# Can be left blank, and the results will output to the same directory as the data.#
out.dir <- "/Users/noahp/Documents/GitHub/global-flourishing-study/3-Rglobalflourishing"#
#
# Here is YOUR wave 1 construct variable#
FOCAL_PREDICTOR <- "PHYSICAL_HLTH_W1"#
FOCAL_PREDICTOR_BETTER_NAME <- "Self-rated physical health"#
FOCAL_PREDICTOR_REFERENCE_VALE <- "estimate population mean of self rated physical health"#
#
# IF your predictor is binary/categorical, use the code below to define how you want it to be#
# 	categorized. Categorization must result in a binary variable 0/1 for consistency across studies.#
# 	Please report how you have categorized your variable to Noah (npadgett@hsph.harvard.edu)#
VALUES_DEFINING_UPPER_CATEGORY <- c(NULL)#
VALUES_DEFINING_LOWER_CATEGORY <- c(NULL)#
# Note 1: if your focal predictor is continuous (all items with 7+ response options), you can force the responses#
# 	to be categorized as 0/1 using the above with the below option changed to TRUE. This can be useful#
# 	when testing the sensitivity of results or for composite outcomes such as anxiety (sum of#
# feel_anxious and control_worry)  or depression (sum of depressed and interest) that have a#
# 	history of being dichotomized.#
FORCE_BINARY <- FALSE#
# Note 2: if your focal predictor is categorical/binary, you can use the responses as if they were continuous.#
# 	This can be done in several ways, but the provided (straightforward-ish) approach is to reverse#
# 	code all ordered-categorical variables (reverse code from what is reported in the codebook), and#
# standardized as if continuous. This approach is not applicable for variables with nominal#
# response categories such as employment. This is employed using the option below.#
FORCE_CONTINUOUS <- FALSE#
#
# ================================================================================================ ##
# ================================================================================================ ##
# Data Prep#
#
  if (is.null(out.dir)) {#
    out.dir <- data.dir#
  }#
  # setwd(out.dir)#
  # Note:#
  # The following function loads the required packages for the remainder of the script to work.#
  load_packages()#
  # global options#
  options(#
    survey.lonely.psu = "certainty"#
  )#
  # outcome vectors#
  LIST.COMPOSITES <- get_variable_codes('LIST.COMPOSITES')#
  # get "raw data"#
  df.raw <- gfs_get_labelled_raw_data(#
    file = here::here(data.dir, dataset.name),#
    list.composites = LIST.COMPOSITES, #
    .test=FALSE#
  )#
#
# ================================================================================================ ##
# ================================================================================================ ##
# Imputing missing data#
{#
  run.imp <- FALSE#
  if (run.imp) {#
    df.tmp <- run_attrition_model(#
      data = df.raw,#
      obs.id.var = "CASE_OBSERVED_W2",#
      attr.pred = c(#
        "ANNUAL_WEIGHT1_W1", "STRATA_W1", "MODE_ANNUAL_W1", #
        "AGE_W1", "GENDER_W1", "EDUCATION_3_W1", "INCOME_QUINTILE_W1",#
        "EMPLOYMENT_W1", "MARITAL_STATUS_W1", "RACE_PLURALITY_W1"#
      ),#
      wgt = "ANNUAL_WEIGHT1_W1", strata = "STRATA_W1", psu = "PSU_W1"#
    )#
    df.imp <- run_impute_data(#
      data = df.tmp,#
      data.dir = data.dir,#
      Nimp = 3,#
      Miter = 1#
    )#
  }#
  load(here::here(data.dir, "gfs_imputed_data_test.RData"))#
  # ~~#
  RECODE.DEFAULTS <- list(#
    FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
    DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
      get_variable_codes("DEMOGRAPHIC.VARS", appnd="_W1"),#
      get_variable_codes("RETROSPECTIVE.VARS", appnd="_W1")#
    ),#
    VARIABLES.VEC = c(get_variable_codes("VARS.W1"), get_variable_codes("VARS.W2")),#
    FORCE_BINARY = FORCE_BINARY,#
    FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
    VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
    VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
    USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
  )#
  df.imp.long <- recode_imputed_data(#
    df.imp,#
    list.default = RECODE.DEFAULTS,#
    list.composites = LIST.COMPOSITES#
  )#
}#
#
# the following checks the imputed data back with the raw data#
tmp.dat1 <- df.raw %>%#
  arrange(ID)#
tmp.dat2 <- df.imp.long %>%#
  filter(.imp == 1) %>%#
  arrange(ID)#
dnn0 <- c("Raw Data", "Recoded Imputed Data (.imp==1)")#
table(tmp.dat1[[FOCAL_PREDICTOR]], tmp.dat2[[FOCAL_PREDICTOR]], dnn=dnn0)
table(tmp.dat1[[FOCAL_PREDICTOR]], tmp.dat2[[FOCAL_PREDICTOR]], dnn=dnn0, useNA="ifany")
{#
  run.imp <- TRUE#
  if (run.imp) {#
    df.tmp <- run_attrition_model(#
      data = df.raw,#
      obs.id.var = "CASE_OBSERVED_W2",#
      attr.pred = c(#
        "ANNUAL_WEIGHT1_W1", "STRATA_W1", "MODE_ANNUAL_W1", #
        "AGE_W1", "GENDER_W1", "EDUCATION_3_W1", "INCOME_QUINTILE_W1",#
        "EMPLOYMENT_W1", "MARITAL_STATUS_W1", "RACE_PLURALITY_W1"#
      ),#
      wgt = "ANNUAL_WEIGHT1_W1", strata = "STRATA_W1", psu = "PSU_W1"#
    )#
    df.imp <- run_impute_data(#
      data = df.tmp,#
      data.dir = data.dir,#
      Nimp = 3,#
      Miter = 1#
    )#
  }#
  load(here::here(data.dir, "gfs_imputed_data_test.RData"))#
  # ~~#
  RECODE.DEFAULTS <- list(#
    FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
    DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
      get_variable_codes("DEMOGRAPHIC.VARS", appnd="_W1"),#
      get_variable_codes("RETROSPECTIVE.VARS", appnd="_W1")#
    ),#
    VARIABLES.VEC = c(get_variable_codes("VARS.W1"), get_variable_codes("VARS.W2")),#
    FORCE_BINARY = FORCE_BINARY,#
    FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
    VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
    VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
    USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
  )#
  df.imp.long <- recode_imputed_data(#
    df.imp,#
    list.default = RECODE.DEFAULTS,#
    list.composites = LIST.COMPOSITES#
  )#
}#
#
# the following checks the imputed data back with the raw data#
tmp.dat1 <- df.raw %>%#
  arrange(ID)#
tmp.dat2 <- df.imp.long %>%#
  filter(.imp == 1) %>%#
  arrange(ID)#
dnn0 <- c("Raw Data", "Recoded Imputed Data (.imp==1)")#
table(tmp.dat1[[FOCAL_PREDICTOR]], tmp.dat2[[FOCAL_PREDICTOR]], dnn=dnn0, useNA="ifany")
devtools::load_all()
df.imp <- run_impute_data(#
      data = df.tmp,#
      data.dir = data.dir,#
      Nimp = 3,#
      Miter = 1#
    )
devtools::load_all()
df.imp <- run_impute_data(#
      data = df.tmp,#
      data.dir = data.dir,#
      Nimp = 3,#
      Miter = 1#
    )
dplyr::last_dplyr_warnings()
load(here::here(data.dir, "gfs_imputed_data_test.RData"))#
  # ~~#
  RECODE.DEFAULTS <- list(#
    FOCAL_PREDICTOR = FOCAL_PREDICTOR,#
    DEMOGRAPHICS.CHILDHOOD.PRED.VEC = c(#
      get_variable_codes("DEMOGRAPHIC.VARS", appnd="_W1"),#
      get_variable_codes("RETROSPECTIVE.VARS", appnd="_W1")#
    ),#
    VARIABLES.VEC = c(get_variable_codes("VARS.W1"), get_variable_codes("VARS.W2")),#
    FORCE_BINARY = FORCE_BINARY,#
    FORCE_CONTINUOUS = FORCE_CONTINUOUS,#
    VALUES_DEFINING_UPPER_CATEGORY = VALUES_DEFINING_UPPER_CATEGORY,#
    VALUES_DEFINING_LOWER_CATEGORY = VALUES_DEFINING_LOWER_CATEGORY,#
    USE_DEFAULT = !(FORCE_BINARY | FORCE_CONTINUOUS)#
  )#
  df.imp.long <- recode_imputed_data(#
    df.imp,#
    list.default = RECODE.DEFAULTS,#
    list.composites = LIST.COMPOSITES#
  )
# the following checks the imputed data back with the raw data#
tmp.dat1 <- df.raw %>%#
  arrange(ID)#
tmp.dat2 <- df.imp.long %>%#
  filter(.imp == 1) %>%#
  arrange(ID)#
dnn0 <- c("Raw Data", "Recoded Imputed Data (.imp==1)")#
table(tmp.dat1[[FOCAL_PREDICTOR]], tmp.dat2[[FOCAL_PREDICTOR]], dnn=dnn0, useNA="ifany")
list.default = RECODE.DEFAULTS
list.composites = LIST.COMPOSITES
drop_created_vars <- c("AGE_GRP_W1", "AGE_GRP_W2", "RACE", "RACE_PLURALITY_W1", "INCOME_QUINTILE_W1", "INCOME_QUINTILE_W2")
df.imp.long <- df.imp %>%#
    mutate(imp.complete = map(imp.res, ~ complete(., action = "long"))) %>%#
    select(COUNTRY, imp.complete) %>%#
    unnest(imp.complete) %>%#
    select(!any_of(drop_created_vars)) %>%#
    mutate(#
      across(where(is.factor) | where(is.character), \(x){#
        x <- sub("\\..*", "", x)#
        case_when(x == "(Missing)" ~ NA, .default = x) |>#
          as.numeric()#
      })#
    )
df.imp.long <- df.imp %>%#
    mutate(imp.complete = map(imp.res, ~ complete(., action = "long"))) %>%#
    select(COUNTRY, imp.complete) %>%#
    unnest(imp.complete) %>%#
    select(!any_of(drop_created_vars))
options(warn=2)#
  for(i in 1:ncol(df.imp.long)){#
   x = df.imp.long[[i]]#
   if(is.factor(x) | is.character(x)){#
     x <- sub("\\..*", "", x)#
     x = case_when(x == "(Missing)" ~ NA, .default = x) |>#
       as.numeric()#
   }
}
i
x = df.imp.long[[i]]
x
x <- sub("\\..*", "", x)
